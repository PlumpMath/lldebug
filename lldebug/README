Please see 'readme.html'.



lldebug - Lua visual debugger


○概要

(Ｃプログラムから呼ばれる)luaプログラムのビジュアルなデバッグ環境を提供します。
見た目はVisual Studioに多少似ています。


○主な機能

・行ごとのステップ実行
・行ごとのブレークポイント
・呼び出し関数終了時までデバッグなしで実行（ステップオーバー）
・関数終了時までデバッグなしで実行（ステップリターン）
・簡易ソース編集機能
・任意のコルーチンのresume/yield(Cプログラム側からを含む)もデバッグ可能
・（ローカル／グローバル／レジストリ／環境）変数ウォッチ
・デバッグ停止中の関数内で対話型デバッギングが可能
・コルーチンを含めたバックトレース


○動作環境

主な使用ライブラリが
lua/wxWidgets/boost_asio/boost_system
なのでこれらが動く環境なら多分大丈夫だと思います。

○ライセンス

ＢＳＤライセンス (or ＧＮＵライセンス)


○使い方

Luaプログラムのみの場合
・事前に、'lldebug_frame(.exe)'でデバッグフレームを起動します
・lua_debug にファイル名を与えて実行してください

Ｃプログラムも含まれている場合
・Ｃプロジェクト側でlldebug.h をインクルード、またlldebug.lib(lldebug.a)をリンク
　（lldebug.h内でlua_openやlua_pcallなどがdefineされていますので、
　自動的に必要な関数が置き換わります）
・'lldebug_frame(.exe)'でデバッグフレームを起動
・Ｃプログラムを実行すればヴィジュアルデバッグが行えます


○イントロダクション
・OutputView(出力ビュー)
エラー情報やトレース情報を表示します。

・InteractiveView(インタラクティブ)
現在実行中の関数コンテキストでLua命令を実行します。
例えば、tab._G=_G (tabは現在アクセス可能なテーブル変数)などです。
ビューに表示されるのは戻り値となる変数（複数可）で、
'return 0, 1, 2'を実行すると'0, 1, 2'が表示されます。
'$評価式'と実行すると、それは'return lldebug.tostring_detail(評価式)'
と解釈され、その評価式の結果を表示します。
lldebug.tostring_detailはオブジェクトを文字列に変換する関数です。

（例１）
まず、'$_G'とビューに入力し、Enterキーを押すかRun(実行)ボタンを押して見てください。
ちゃんと、グローバルテーブルの中身が表示されましたか？
それとも、_Gはnilですよ〜的なエラーが発生しましたか？
_Gというのはluaが標準関数の登録中に設定した、グローバルテーブルオブジェクトなのですが、
これは標準関数が初期化されていないと使えません。
なので、nilですよと出力された場合には、とりあえず標準ライブラリを読み込むか
他のアクセス可能なテーブルか他のオブジェクトに名前を変更してください。

そして、テーブルの中身がちゃんと表示されたとしましょう。
先ほど言った通り、'$_G'は'return lldebug.tostring_detail(_G)'と解釈されるのですが、
この表示形式を変更したい場合は（ここではtostringに変更）
このビュー内で'lldebug.tostring_detail=tostring'を実行してみましょう。
関数の内容が置き換わります。
その後、'$_G'を実行すると、今まではテーブル中のフィールドが表示されていましたが、
こんどはテーブルのアドレス値のみの表示になっていると思います。
さらに関数を自前のものに変更したい場合は、例えば
'lldebug.tostring_detail = function(obj) return "おっす。オラ '" .. tostring(obj) .. "' ！" end'
を実行し、'$_G'を実行してみましょう。
また違った表示になると思います^^

仕様）
　デバッグ付きで命令を実行することはできません。


・GlobalWatch(グローバル変数)
グローバル変数が表示されます。

・LocalWatch(ローカル変数)
実行されている関数のローカル変数が表示されます。

・EnvironWatch(環境変数)
実行されている関数の環境テーブル変数が表示されます。

・EnvironWatch(環境変数)
実行されている関数の環境テーブル変数を表示します。

・Watch(変数ウォッチ)
設定された任意の評価式の値を表示します。
実行中の関数コンテキスト内で実際に評価式を実行して値を得ます。
式に副作用がある場合は気をつけてください。
評価式が呼ばれるタイミングや回数に関しては一切の保証がありません。

・Backtrace(関数呼び出し履歴)
関数の呼び出し履歴をcoroutineをまたいで表示します。
それがlua関数なら、関数を選択することで関数コンテキストをその関数に変更することができます。
つまり、その関数選択中はLocalWatchの表示内容やインタラクティブビューの実行結果が変わるかもしれません。
（影響を受けるものは、正確にはLocalWatch/EnvironWatch/Watch/InteractiveViewです）
その効果はデバッグを進めるか、他の関数を選択するまで継続されます。


○チュートリアル
まず、lldebug_frame.exeを起動します。
実行したいLuaファイルを用意し、それをlua_debug(.exe)から実行します。


○フレームの事前起動について
フレームが無い場合、Contextからlldebug_frameを直接実行するか？
フレームのポート番号はいくつになるのか？
Frame=Server, Context=Client
フレームの引数にポート番号を指定できるので、
Contextから起動する場合は、自分に与えられたポートと同じ番号を与えればよい。
もちろんパスが通っていないとダメ。

実行関数
system or 環境依存の関数
windows: ShellExecute or CreateProcess
posix: exec
他の環境: unknown

