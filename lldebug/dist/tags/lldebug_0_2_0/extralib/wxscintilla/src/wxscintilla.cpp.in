////////////////////////////////////////////////////////////////////////////
// Name:        wxscintilla.cpp
// Purpose:     A wxWidgets implementation of Scintilla.  This class is the
//              one meant to be used directly by wx applications.  It does not
//              derive directly from the Scintilla classes, but instead
//              delegates most things to the real Scintilla class.
//              This allows the use of Scintilla without polluting the
//              namespace with all the classes and identifiers from Scintilla.
//
// Author:      Robin Dunn
//
// Created:     13-Jan-2000
// RCS-ID:      $Id: wxscintilla.cpp.in,v 1.1 2008-03-18 16:10:08 cielacanth Exp $
// Copyright:   (c) 2004 wxCode
// Licence:     wxWindows
/////////////////////////////////////////////////////////////////////////////

// modified
// wxscintilla.cpp,v 1.34 2007/12/19 07:37:29 cielacanth Exp $

#include <ctype.h>

#include "ScintillaWX.h"
#include "wx/wxscintilla.h"

#include "wx/wx.h"
#include "wx/tokenzr.h"
#include "wx/mstream.h"
#include "wx/image.h"
#include "wx/file.h"


//----------------------------------------------------------------------

const wxChar* wxSCINameStr = _T("SCIwindow");

#ifdef MAKELONG
#undef MAKELONG
#endif

#define MAKELONG(a, b) ((a) | ((b) << 16))


static long wxColourAsLong(const wxColour& co) {
    return (((long)co.Blue()  << 16) |
            ((long)co.Green() <<  8) |
            ((long)co.Red()));
}

static wxColour wxColourFromLong(long c) {
    wxColour clr;
    clr.Set((unsigned char)(c & 0xff),
            (unsigned char)((c >> 8) & 0xff),
            (unsigned char)((c >> 16) & 0xff));
    return clr;
}


static wxColour wxColourFromSpec(const wxString& spec) {
    // spec should be a colour name or "#RRGGBB"
    if (spec.GetChar(0) == _T('#')) {

        long red, green, blue;
        red = green = blue = 0;
        spec.Mid(1,2).ToLong(&red,   16);
        spec.Mid(3,2).ToLong(&green, 16);
        spec.Mid(5,2).ToLong(&blue,  16);
        return wxColour((unsigned char)red, (unsigned char)green, (unsigned char)blue);
    }else{
        return wxColour(spec);
    }
}

//----------------------------------------------------------------------

DEFINE_EVENT_TYPE( wxEVT_SCI_CHANGE )
DEFINE_EVENT_TYPE( wxEVT_SCI_STYLENEEDED )
DEFINE_EVENT_TYPE( wxEVT_SCI_CHARADDED )
DEFINE_EVENT_TYPE( wxEVT_SCI_SAVEPOINTREACHED )
DEFINE_EVENT_TYPE( wxEVT_SCI_SAVEPOINTLEFT )
DEFINE_EVENT_TYPE( wxEVT_SCI_ROMODIFYATTEMPT )
DEFINE_EVENT_TYPE( wxEVT_SCI_KEY )
DEFINE_EVENT_TYPE( wxEVT_SCI_DOUBLECLICK )
DEFINE_EVENT_TYPE( wxEVT_SCI_UPDATEUI )
DEFINE_EVENT_TYPE( wxEVT_SCI_MODIFIED )
DEFINE_EVENT_TYPE( wxEVT_SCI_MACRORECORD )
DEFINE_EVENT_TYPE( wxEVT_SCI_MARGINCLICK )
DEFINE_EVENT_TYPE( wxEVT_SCI_NEEDSHOWN )
DEFINE_EVENT_TYPE( wxEVT_SCI_PAINTED )
DEFINE_EVENT_TYPE( wxEVT_SCI_USERLISTSELECTION )
DEFINE_EVENT_TYPE( wxEVT_SCI_URIDROPPED )
DEFINE_EVENT_TYPE( wxEVT_SCI_DWELLSTART )
DEFINE_EVENT_TYPE( wxEVT_SCI_DWELLEND )
DEFINE_EVENT_TYPE( wxEVT_SCI_START_DRAG )
DEFINE_EVENT_TYPE( wxEVT_SCI_DRAG_OVER )
DEFINE_EVENT_TYPE( wxEVT_SCI_DO_DROP )
DEFINE_EVENT_TYPE( wxEVT_SCI_ZOOM )
DEFINE_EVENT_TYPE( wxEVT_SCI_HOTSPOT_CLICK )
DEFINE_EVENT_TYPE( wxEVT_SCI_HOTSPOT_DCLICK )
DEFINE_EVENT_TYPE( wxEVT_SCI_CALLTIP_CLICK )
DEFINE_EVENT_TYPE( wxEVT_SCI_AUTOCOMP_SELECTION )



BEGIN_EVENT_TABLE(wxScintilla, wxControl)
    EVT_PAINT                   (wxScintilla::OnPaint)
    EVT_SCROLLWIN               (wxScintilla::OnScrollWin)
    EVT_SCROLL                  (wxScintilla::OnScroll)
    EVT_SIZE                    (wxScintilla::OnSize)
    EVT_LEFT_DOWN               (wxScintilla::OnMouseLeftDown)
    // Let Scintilla see the double click as a second click
    EVT_LEFT_DCLICK             (wxScintilla::OnMouseLeftDown)
    EVT_MOTION                  (wxScintilla::OnMouseMove)
    EVT_LEFT_UP                 (wxScintilla::OnMouseLeftUp)
#if defined(__WXGTK__) || defined(__WXMAC__)
    EVT_RIGHT_UP                (wxScintilla::OnMouseRightUp)
#else
    EVT_CONTEXT_MENU            (wxScintilla::OnContextMenu)
#endif
    EVT_MOUSEWHEEL              (wxScintilla::OnMouseWheel)
    EVT_MIDDLE_UP               (wxScintilla::OnMouseMiddleUp)
    EVT_CHAR                    (wxScintilla::OnChar)
    EVT_KEY_DOWN                (wxScintilla::OnKeyDown)
    EVT_KILL_FOCUS              (wxScintilla::OnLoseFocus)
    EVT_SET_FOCUS               (wxScintilla::OnGainFocus)
    EVT_SYS_COLOUR_CHANGED      (wxScintilla::OnSysColourChanged)
    EVT_ERASE_BACKGROUND        (wxScintilla::OnEraseBackground)
    EVT_MENU_RANGE              (10, 16, wxScintilla::OnMenu)
    EVT_LISTBOX_DCLICK          (wxID_ANY, wxScintilla::OnListBox)
END_EVENT_TABLE()


IMPLEMENT_CLASS(wxScintilla, wxControl)
IMPLEMENT_DYNAMIC_CLASS(wxScintillaEvent, wxCommandEvent)

#ifdef LINK_LEXERS
// forces the linking of the lexer modules
int Scintilla_LinkLexers();
#endif

//----------------------------------------------------------------------
// Constructor and Destructor

wxScintilla::wxScintilla (wxWindow *parent,
                          wxWindowID id,
                          const wxPoint& pos,
                          const wxSize& size,
                          long style,
                          const wxString& name) {
    m_swx = NULL;
    Create (parent, id, pos, size, style, name);
}


bool wxScintilla::Create (wxWindow *parent,
                          wxWindowID id,
                          const wxPoint& pos,
                          const wxSize& size,
                          long style,
                          const wxString& name) {
#ifdef __WXMAC__
    style |= wxVSCROLL | wxHSCROLL;
#endif
    if (!wxControl::Create (parent, id, pos, size,
                            style | wxWANTS_CHARS | wxCLIP_CHILDREN,
                            wxDefaultValidator, name)) {
        return false;
    }

#ifdef LINK_LEXERS
    Scintilla_LinkLexers();
#endif
    m_swx = new ScintillaWX(this);
    m_stopWatch.Start();
    m_lastKeyDownConsumed = FALSE;
    m_vScrollBar = NULL;
    m_hScrollBar = NULL;
#if wxUSE_UNICODE
    // Put Scintilla into unicode (UTF-8) mode
    SetCodePage(wxSCI_CP_UTF8);
#endif

#if wxCHECK_VERSION(2, 5, 0)
    // Reduces flicker on GTK+/X11
    SetBackgroundStyle(wxBG_STYLE_CUSTOM);
    SetBestFittingSize(size);
#endif
    return true;
}

wxScintilla::~wxScintilla() {
    delete m_swx;
}


//----------------------------------------------------------------------
// Send message to Scintilla
sptr_t wxScintilla::SendMsg (unsigned int msg, uptr_t wp, sptr_t lp) {
    return m_swx->WndProc (msg, wp, lp);
}

//----------------------------------------------------------------------

// Set the vertical scrollbar to use instead of the ont that's built-in.
void wxScintilla::SetVScrollBar (wxScrollBar* bar) {
    m_vScrollBar = bar;
    if (bar != NULL) {
        // ensure that the built-in scrollbar is not visible
        SetScrollbar(wxVERTICAL, 0, 0, 0);
    }
}

// Set the horizontal scrollbar to use instead of the ont that's built-in.
void wxScintilla::SetHScrollBar (wxScrollBar* bar) {
    m_hScrollBar = bar;
    if (bar != NULL) {
        // ensure that the built-in scrollbar is not visible
        SetScrollbar(wxHORIZONTAL, 0, 0, 0);
    }
}

//----------------------------------------------------------------------
// BEGIN generated section.  The following code is automatically generated
//       by gen_iface.py from the contents of Scintilla.iface.  Do not edit
//       this file.  Edit wxscintilla.cpp.in or gen_iface.py instead and regenerate.

%(METHOD_IMPS)s

// END of generated section
//----------------------------------------------------------------------


// Returns the line number of the line with the caret.
int wxScintilla::GetCurrentLine () {
    int line = LineFromPosition (GetCurrentPos());
    return line;
}

// Retrieve the point in the window where a position is displayed.
wxPoint wxScintilla::PointFromPosition (int pos) {
    int x = SendMsg(SCI_POINTXFROMPOSITION, 0, pos);
    int y = SendMsg(SCI_POINTYFROMPOSITION, 0, pos);
    return wxPoint (x, y);
}

// Extract style settings from a spec-string which is composed of one or
// more of the following comma separated elements:
//
//      bold                    turns on bold
//      italic                  turns on italics
//      fore:[name or #RRGGBB]  sets the foreground colour
//      back:[name or #RRGGBB]  sets the background colour
//      face:[facename]         sets the font face name to use
//      size:[num]              sets the font size in points
//      eol                     turns on eol filling
//      underline               turns on underlining
//
void wxScintilla::StyleSetSpec (int styleNum, const wxString& spec) {

    wxStringTokenizer tkz (spec, _T(","));
    while (tkz.HasMoreTokens()) {
        wxString token = tkz.GetNextToken();

        wxString option = token.BeforeFirst (':');
        wxString val = token.AfterFirst (':');

        if (option == _T("bold"))
            StyleSetBold (styleNum, true);

        else if (option == _T("italic"))
            StyleSetItalic (styleNum, true);

        else if (option == _T("underline"))
            StyleSetUnderline (styleNum, true);

        else if (option == _T("eol"))
            StyleSetEOLFilled (styleNum, true);

        else if (option == _T("size")) {
            long points;
            if (val.ToLong (&points))
                StyleSetSize (styleNum, points);
        }

        else if (option == _T("face"))
            StyleSetFaceName (styleNum, val);

        else if (option == _T("fore"))
            StyleSetForeground (styleNum, wxColourFromSpec (val));

        else if (option == _T("back"))
            StyleSetBackground (styleNum, wxColourFromSpec (val));
    }
}


// Set style size, face, bold, italic, and underline attributes from
// a wxFont's attributes.
void wxScintilla::StyleSetFont (int styleNum, wxFont& font) {
#ifdef __WXGTK__
    // Ensure that the native font is initialized
    int x, y;
    GetTextExtent (_T("X"), &x, &y, NULL, NULL, &font);
#endif
    int            size     = font.GetPointSize();
    wxString       faceName = font.GetFaceName();
    bool           bold     = font.GetWeight() == wxBOLD;
    bool           italic   = font.GetStyle() == wxITALIC;
    bool           under    = font.GetUnderlined();
    wxFontEncoding encoding = font.GetEncoding();

    StyleSetFontAttr (styleNum, size, faceName, bold, italic, under, encoding);
}

// Set all font style attributes at once.
void wxScintilla::StyleSetFontAttr (int styleNum, int size, const wxString& faceName,
                                    bool bold, bool italic, bool underline,
                                    wxFontEncoding encoding) {
    StyleSetSize (styleNum, size);
    StyleSetFaceName (styleNum, faceName);
    StyleSetBold (styleNum, bold);
    StyleSetItalic (styleNum, italic);
    StyleSetUnderline (styleNum, underline);
    StyleSetFontEncoding (styleNum, encoding);
}

// Set the character set of the font in a style.
void wxScintilla::StyleSetCharacterSet (int style, int characterSet) {
    wxFontEncoding encoding;

    // Translate the Scintilla characterSet to a wxFontEncoding
    switch (characterSet) {
        default:
        case wxSCI_CHARSET_ANSI:
        case wxSCI_CHARSET_DEFAULT:
            encoding = wxFONTENCODING_DEFAULT;
            break;
        case wxSCI_CHARSET_BALTIC:
            encoding = wxFONTENCODING_ISO8859_13;
            break;
        case wxSCI_CHARSET_CHINESEBIG5:
            encoding = wxFONTENCODING_CP950;
            break;
        case wxSCI_CHARSET_EASTEUROPE:
            encoding = wxFONTENCODING_ISO8859_2;
            break;
        case wxSCI_CHARSET_GB2312:
            encoding = wxFONTENCODING_CP936;
            break;
        case wxSCI_CHARSET_GREEK:
            encoding = wxFONTENCODING_ISO8859_7;
            break;
        case wxSCI_CHARSET_HANGUL:
            encoding = wxFONTENCODING_CP949;
            break;
        case wxSCI_CHARSET_MAC:
            encoding = wxFONTENCODING_DEFAULT;
            break;
        case wxSCI_CHARSET_OEM:
            encoding = wxFONTENCODING_DEFAULT;
            break;
        case wxSCI_CHARSET_RUSSIAN:
            encoding = wxFONTENCODING_KOI8;
            break;
        case wxSCI_CHARSET_SHIFTJIS:
            encoding = wxFONTENCODING_CP932;
            break;
        case wxSCI_CHARSET_SYMBOL:
            encoding = wxFONTENCODING_DEFAULT;
            break;
        case wxSCI_CHARSET_TURKISH:
            encoding = wxFONTENCODING_ISO8859_9;
            break;
        case wxSCI_CHARSET_JOHAB:
            encoding = wxFONTENCODING_DEFAULT;
            break;
        case wxSCI_CHARSET_HEBREW:
            encoding = wxFONTENCODING_ISO8859_8;
            break;
        case wxSCI_CHARSET_ARABIC:
            encoding = wxFONTENCODING_ISO8859_6;
            break;
        case wxSCI_CHARSET_VIETNAMESE:
            encoding = wxFONTENCODING_DEFAULT;
            break;
        case wxSCI_CHARSET_THAI:
            encoding = wxFONTENCODING_ISO8859_11;
            break;
        case wxSCI_CHARSET_CYRILLIC:
            encoding = wxFONTENCODING_ISO8859_5;
            break;
        case wxSCI_CHARSET_8859_15:
            encoding = wxFONTENCODING_ISO8859_15;
            break;
    }

    // We just have Scintilla track the wxFontEncoding for us.  It gets used
    // in Font::Create in PlatWX.cpp.  We add one to the value so that the
    // effective wxFONENCODING_DEFAULT == SC_SHARSET_DEFAULT and so when
    // Scintilla internally uses SC_CHARSET_DEFAULT we will translate it back
    // to wxFONENCODING_DEFAULT in Font::Create.
    SendMsg (SCI_STYLESETCHARACTERSET, style, encoding+1);
}

// Set the font encoding to be used by a style.
void wxScintilla::StyleSetFontEncoding(int style, wxFontEncoding encoding) {
    SendMsg (SCI_STYLESETCHARACTERSET, style, encoding+1);
}

// Perform one of the operations defined by the wxSCI_CMD_* constants.
void wxScintilla::CmdKeyExecute (int cmd) {
    SendMsg (cmd);
}


// Set the left and right margin in the edit area, measured in pixels.
void wxScintilla::SetMargins (int left, int right) {
    SetMarginLeft (left);
    SetMarginRight (right);
}


// Retrieve the start and end positions of the current selection.
void wxScintilla::GetSelection (int* startPos, int* endPos) {
    if (startPos != NULL) *startPos = SendMsg (SCI_GETSELECTIONSTART);
    if (endPos != NULL) *endPos = SendMsg (SCI_GETSELECTIONEND);
}


// Scroll enough to make the given line visible
void wxScintilla::ScrollToLine (int line) {
    m_swx->DoScrollToLine (line);
}


// Scroll enough to make the given column visible
void wxScintilla::ScrollToColumn (int column) {
    m_swx->DoScrollToColumn (column);
}


bool wxScintilla::SaveFile (const wxString& filename) {
    wxFile file (filename, wxFile::write);
    if (!file.IsOpened()) return false;

    bool success = file.Write (GetText(), *wxConvCurrent);
    if (success) {
        SetSavePoint();
    }

    return success;
}

bool wxScintilla::LoadFile (const wxString& filename) {
    wxFile file (filename, wxFile::read);
    if (!file.IsOpened()) return false;

    // get the file size (assume it is not huge file...)
    size_t len = file.Length();

    bool success = false;
    if (len > 0) {
#if wxUSE_UNICODE
        wxMemoryBuffer buffer (len+1);
        success = (file.Read (buffer.GetData(), len) == (int)len);
        if (success) {
            ((char*)buffer.GetData())[len] = 0;
            SetText (wxString (buffer, *wxConvCurrent, len));
        }
#else
        wxString buffer;
        success = (file.Read (wxStringBuffer (buffer, len), len) == (int)len);
        if (success) {
            SetText (buffer);
        }
#endif
    }else if (len == 0) {
        success = true; // empty file is ok
        SetText (wxEmptyString);
    }else{
        success = false; // len == wxInvalidOffset
    }

    if (success) {
        EmptyUndoBuffer();
        SetSavePoint();
    }

    return success;
}


#if SCI_USE_DND
wxDragResult wxScintilla::DoDragOver (wxCoord x, wxCoord y, wxDragResult def) {
    return m_swx->DoDragOver (x, y, def);
}

bool wxScintilla::DoDropText (long x, long y, const wxString& data) {
    return m_swx->DoDropText (x, y, data);
}

wxDragResult wxScintilla::DoDragEnter (wxCoord x, wxCoord y, wxDragResult def) {
    return m_swx->DoDragOver (x, y, def);
}

void wxScintilla::DoDragLeave () {
    m_swx->DoDragLeave ();
}
#endif


void wxScintilla::SetUseAntiAliasing (bool useAA) {
    m_swx->SetUseAntiAliasing (useAA);
}

bool wxScintilla::GetUseAntiAliasing() {
    return m_swx->GetUseAntiAliasing();
}

#if wxCHECK_VERSION(2, 5, 0)
// Raw text handling for UTF-8
void wxScintilla::AddTextRaw (const char* text) {
    SendMsg (SCI_ADDTEXT, (uptr_t)strlen(text), (sptr_t)text);
}

void wxScintilla::InsertTextRaw (int pos, const char* text) {
    SendMsg (SCI_INSERTTEXT, pos, (sptr_t)text);
}

wxCharBuffer wxScintilla::GetCurLineRaw (int* linePos) {
    int len = LineLength (GetCurrentLine());
    if (!len) {
        if (linePos)  *linePos = 0;
        wxCharBuffer empty;
        return empty;
    }
    wxCharBuffer buf(len);
    int pos = SendMsg (SCI_GETCURLINE, len, (sptr_t)buf.data());
    if (linePos) *linePos = pos;
    return buf;
}

wxCharBuffer wxScintilla::GetLineRaw (int line) {
    int len = LineLength (line);
    if (!len) {
        wxCharBuffer empty;
        return empty;
    }
    wxCharBuffer buf(len);
    SendMsg (SCI_GETLINE, line, (sptr_t)buf.data());
    return buf;
}

wxCharBuffer wxScintilla::GetSelectedTextRaw() {
    int start;
    int end;
    GetSelection (&start, &end);
    int len = end - start;
    if (!len) {
        wxCharBuffer empty;
        return empty;
    }
    wxCharBuffer buf(len);
    SendMsg (SCI_GETSELTEXT, 0, (sptr_t)buf.data());
    return buf;
}

wxCharBuffer wxScintilla::GetTextRangeRaw (int startPos, int endPos) {
    if (endPos < startPos) {
        int temp = startPos;
        startPos = endPos;
        endPos = temp;
    }
    int len  = endPos - startPos;
    if (!len) {
        wxCharBuffer empty;
        return empty;
    }
    wxCharBuffer buf(len);
    TextRange tr;
    tr.lpstrText = buf.data();
    tr.chrg.cpMin = startPos;
    tr.chrg.cpMax = endPos;
    SendMsg (SCI_GETTEXTRANGE, 0, (sptr_t)&tr);
    return buf;
}

void wxScintilla::SetTextRaw (const char* text) {
    SendMsg (SCI_SETTEXT, 0, (sptr_t)text);
}

wxCharBuffer wxScintilla::GetTextRaw() {
    int len = GetTextLength();
    wxCharBuffer buf(len);
    SendMsg (SCI_GETTEXT, len, (sptr_t)buf.data());
    return buf;
}

void wxScintilla::AppendTextRaw (const char* text) {
    SendMsg (SCI_APPENDTEXT, (uptr_t)strlen(text), (sptr_t)text);
}
#endif


//----------------------------------------------------------------------
// Event handlers

void wxScintilla::OnPaint (wxPaintEvent& WXUNUSED(evt)) {
    wxPaintDC dc(this);
    m_swx->DoPaint (&dc, GetUpdateRegion().GetBox());
}

void wxScintilla::OnScrollWin (wxScrollWinEvent& evt) {
    if (evt.GetOrientation() == wxHORIZONTAL)
        m_swx->DoHScroll (evt.GetEventType(), evt.GetPosition());
    else
        m_swx->DoVScroll (evt.GetEventType(), evt.GetPosition());
}

void wxScintilla::OnScroll (wxScrollEvent& evt) {
    wxScrollBar* sb = wxDynamicCast (evt.GetEventObject(), wxScrollBar);
    if (sb) {
        if (sb->IsVertical())
            m_swx->DoVScroll (evt.GetEventType(), evt.GetPosition());
        else
            m_swx->DoHScroll (evt.GetEventType(), evt.GetPosition());
    }
}

void wxScintilla::OnSize (wxSizeEvent& WXUNUSED(evt)) {
    if (m_swx) {
        wxSize sz = GetClientSize();
        m_swx->DoSize (sz.x, sz.y);
    }
}

void wxScintilla::OnMouseLeftDown (wxMouseEvent& evt) {
    SetFocus();
    wxPoint pt = evt.GetPosition();
    m_swx->DoLeftButtonDown (Point(pt.x, pt.y), m_stopWatch.Time(),
                             evt.ShiftDown(), evt.ControlDown(), evt.AltDown());
}

void wxScintilla::OnMouseMove (wxMouseEvent& evt) {
    wxPoint pt = evt.GetPosition();
    m_swx->DoLeftButtonMove (Point(pt.x, pt.y));
}

void wxScintilla::OnMouseLeftUp (wxMouseEvent& evt) {
    wxPoint pt = evt.GetPosition();
    m_swx->DoLeftButtonUp (Point(pt.x, pt.y), m_stopWatch.Time(),
                           evt.ControlDown());
}


void wxScintilla::OnMouseRightUp (wxMouseEvent& evt) {
    wxPoint pt = evt.GetPosition();
    m_swx->DoContextMenu (Point(pt.x, pt.y));
}


void wxScintilla::OnMouseMiddleUp (wxMouseEvent& evt) {
    wxPoint pt = evt.GetPosition();
    m_swx->DoMiddleButtonUp (Point(pt.x, pt.y));
}

void wxScintilla::OnContextMenu (wxContextMenuEvent& evt) {
    wxPoint pt = evt.GetPosition();
    ScreenToClient (&pt.x, &pt.y);
    /*
      Show context menu at event point if it's within the window,
      or at caret location if not
    */
    wxHitTest ht = this->HitTest(pt);
    if (ht != wxHT_WINDOW_INSIDE) {
        pt = this->PointFromPosition (this->GetCurrentPos());
    }
    m_swx->DoContextMenu (Point(pt.x, pt.y));
}

void wxScintilla::OnMouseWheel (wxMouseEvent& evt) {
    m_swx->DoMouseWheel (evt.GetWheelRotation(),
                         evt.GetWheelDelta(),
                         evt.GetLinesPerAction(),
                         evt.ControlDown(),
                         evt.IsPageScroll());
}


void wxScintilla::OnChar (wxKeyEvent& evt) {
    // On (some?) non-US keyboards the AltGr key is required to enter some
    // common characters.  It comes to us as both Alt and Ctrl down so we need
    // to let the char through in that case, otherwise if only ctrl or only
    // alt let's skip it.
    bool ctrl = evt.ControlDown();
#ifdef __WXMAC__
    // On the Mac the Alt key is just a modifier key (like Shift) so we need
    // to allow the char events to be processed when Alt is pressed.
    // TODO:  Should we check MetaDown instead in this case?
    bool alt = false;
#else
    bool alt  = evt.AltDown();
#endif
    bool skip = ((ctrl || alt) && ! (ctrl && alt));

    if (!m_lastKeyDownConsumed && !skip) {
#if wxUSE_UNICODE
#if !wxCHECK_VERSION(2, 5, 0)
        int key = evt.m_rawCode;
#else
        int key = evt.GetUnicodeKey();
#endif
        bool keyOk = true;

        // if the unicode key code is not really a unicode character (it may
        // be a function key or etc., the platforms appear to always give us a
        // small value in this case) then fallback to the ascii key code but
        // don't do anything for function keys or etc.
        if (key <= 127) {
            key = evt.GetKeyCode();
            keyOk = (key <= 127);
        }
        if (keyOk) {
            m_swx->DoAddChar (key);
            return;
        }
#else
        int key = evt.GetKeyCode();
#if !wxCHECK_VERSION(2, 5, 0)
        if ( (key <= WXK_START || key > WXK_NUMPAD_DIVIDE)) {
#else
        if ( (key <= WXK_START || key > WXK_COMMAND)) {
#endif
            m_swx->DoAddChar (key);
            return;
        }
#endif
    }
    evt.Skip();
}

void wxScintilla::OnKeyDown (wxKeyEvent& evt) {
    int processed = m_swx->DoKeyDown (evt, &m_lastKeyDownConsumed);
    if (!processed && !m_lastKeyDownConsumed) {
        evt.Skip();
    }
}

void wxScintilla::OnLoseFocus (wxFocusEvent& evt) {
    m_swx->DoLoseFocus();
    evt.Skip();
}


void wxScintilla::OnGainFocus (wxFocusEvent& evt) {
    m_swx->DoGainFocus();
    evt.Skip();
}


void wxScintilla::OnSysColourChanged (wxSysColourChangedEvent& WXUNUSED(evt)) {
    m_swx->DoSysColourChange();
}


void wxScintilla::OnEraseBackground (wxEraseEvent& WXUNUSED(evt)) {
    // do nothing to help avoid flashing
}



void wxScintilla::OnMenu (wxCommandEvent& evt) {
    m_swx->DoCommand (evt.GetId());
}


void wxScintilla::OnListBox (wxCommandEvent& WXUNUSED(evt)) {
    m_swx->DoOnListBox ();
}


void wxScintilla::OnIdle (wxIdleEvent& evt) {
    m_swx->DoOnIdle (evt);
}


wxSize wxScintilla::DoGetBestSize() const
{
    // What would be the best size for a wxSintilla?
    // Just give a reasonable minimum until something else can be figured out.
    return wxSize(600,440);
}


//----------------------------------------------------------------------
// Turn notifications from Scintilla into events


void wxScintilla::NotifyChange() {
    wxScintillaEvent evt (wxEVT_SCI_CHANGE, GetId());
    evt.SetEventObject (this);
    GetEventHandler()->ProcessEvent(evt);
}

static void SetEventText (wxScintillaEvent& evt, const char* text, size_t length) {
    if(!text) return;
    evt.SetText(sci2wx(text, length));
}

void wxScintilla::NotifyParent (SCNotification* _scn) {
    SCNotification& scn = *_scn;
    wxScintillaEvent evt (0, GetId());
    evt.SetEventObject (this);
    evt.SetPosition (scn.position);
    evt.SetKey (scn.ch);
    evt.SetModifiers (scn.modifiers);

    switch (scn.nmhdr.code) {
    case SCN_STYLENEEDED:
        evt.SetEventType (wxEVT_SCI_STYLENEEDED);
        break;

    case SCN_CHARADDED:
        evt.SetEventType (wxEVT_SCI_CHARADDED);
        break;

    case SCN_SAVEPOINTREACHED:
        evt.SetEventType (wxEVT_SCI_SAVEPOINTREACHED);
        break;

    case SCN_SAVEPOINTLEFT:
        evt.SetEventType (wxEVT_SCI_SAVEPOINTLEFT);
        break;

    case SCN_MODIFYATTEMPTRO:
        evt.SetEventType (wxEVT_SCI_ROMODIFYATTEMPT);
        break;

    case SCN_KEY:
        evt.SetEventType (wxEVT_SCI_KEY);
        break;

    case SCN_DOUBLECLICK:
        evt.SetEventType (wxEVT_SCI_DOUBLECLICK);
        break;

    case SCN_UPDATEUI:
        evt.SetEventType (wxEVT_SCI_UPDATEUI);
        break;

    case SCN_MODIFIED:
        evt.SetEventType (wxEVT_SCI_MODIFIED);
        evt.SetModificationType (scn.modificationType);
        SetEventText (evt, scn.text, scn.length);
        evt.SetLength (scn.length);
        evt.SetLinesAdded (scn.linesAdded);
        evt.SetLine (scn.line);
        evt.SetFoldLevelNow (scn.foldLevelNow);
        evt.SetFoldLevelPrev (scn.foldLevelPrev);
        break;

    case SCN_MACRORECORD:
        evt.SetEventType (wxEVT_SCI_MACRORECORD);
        evt.SetMessage (scn.message);
        evt.SetWParam (scn.wParam);
        evt.SetLParam (scn.lParam);
        break;

    case SCN_MARGINCLICK:
        evt.SetEventType (wxEVT_SCI_MARGINCLICK);
        evt.SetMargin (scn.margin);
        break;

    case SCN_NEEDSHOWN:
        evt.SetEventType (wxEVT_SCI_NEEDSHOWN);
        evt.SetLength (scn.length);
        break;

    case SCN_PAINTED:
        evt.SetEventType (wxEVT_SCI_PAINTED);
        break;

    case SCN_USERLISTSELECTION:
        evt.SetEventType (wxEVT_SCI_USERLISTSELECTION);
        evt.SetListType (scn.listType);
        SetEventText (evt, scn.text, (sptr_t)strlen(scn.text));
        break;

    case SCN_URIDROPPED:
        evt.SetEventType (wxEVT_SCI_URIDROPPED);
        SetEventText (evt, scn.text, (sptr_t)strlen(scn.text));
        break;

    case SCN_DWELLSTART:
        evt.SetEventType (wxEVT_SCI_DWELLSTART);
        evt.SetX (scn.x);
        evt.SetY (scn.y);
        break;

    case SCN_DWELLEND:
        evt.SetEventType (wxEVT_SCI_DWELLEND);
        evt.SetX (scn.x);
        evt.SetY (scn.y);
        break;

    case SCN_ZOOM:
        evt.SetEventType (wxEVT_SCI_ZOOM);
        break;

    case SCN_HOTSPOTCLICK:
        evt.SetEventType (wxEVT_SCI_HOTSPOT_CLICK);
        break;

    case SCN_HOTSPOTDOUBLECLICK:
        evt.SetEventType (wxEVT_SCI_HOTSPOT_DCLICK);
        break;

    case SCN_CALLTIPCLICK:
        evt.SetEventType (wxEVT_SCI_CALLTIP_CLICK);
        break;

    case SCN_AUTOCSELECTION:
        evt.SetEventType (wxEVT_SCI_AUTOCOMP_SELECTION);
        break;

    default:
        return;
    }

    GetEventHandler()->ProcessEvent (evt);
}


//----------------------------------------------------------------------
//----------------------------------------------------------------------
//----------------------------------------------------------------------

wxScintillaEvent::wxScintillaEvent (wxEventType commandType, int id)
                : wxCommandEvent (commandType, id) {
    m_position = 0;
    m_key = 0;
    m_modifiers = 0;
    m_modificationType = 0;
    m_length = 0;
    m_linesAdded = 0;
    m_line = 0;
    m_foldLevelNow = 0;
    m_foldLevelPrev = 0;
    m_margin = 0;
    m_message = 0;
    m_wParam = 0;
    m_lParam = 0;
    m_listType = 0;
    m_x = 0;
    m_y = 0;
    m_dragAllowMove = FALSE;
#if wxUSE_DRAG_AND_DROP
    m_dragResult = wxDragNone;
#endif
}

bool wxScintillaEvent::GetShift() const { return (m_modifiers & SCI_SHIFT) != 0; }
bool wxScintillaEvent::GetControl() const { return (m_modifiers & SCI_CTRL) != 0; }
bool wxScintillaEvent::GetAlt() const { return (m_modifiers & SCI_ALT) != 0; }


wxScintillaEvent::wxScintillaEvent (const wxScintillaEvent& event)
                : wxCommandEvent(event) {
    m_position =         event.m_position;
    m_key =              event.m_key;
    m_modifiers =        event.m_modifiers;
    m_modificationType = event.m_modificationType;
    m_text =             event.m_text;
    m_length =           event.m_length;
    m_linesAdded =       event.m_linesAdded;
    m_line =             event.m_line;
    m_foldLevelNow =     event.m_foldLevelNow;
    m_foldLevelPrev =    event.m_foldLevelPrev;
    m_margin =           event.m_margin;
    m_message =          event.m_message;
    m_wParam =           event.m_wParam;
    m_lParam =           event.m_lParam;
    m_listType =         event.m_listType;
    m_x =                event.m_x;
    m_y =                event.m_y;
    m_dragText =         event.m_dragText;
    m_dragAllowMove =    event.m_dragAllowMove;
#if wxUSE_DRAG_AND_DROP
    m_dragResult =       event.m_dragResult;
#endif
}

//----------------------------------------------------------------------
//----------------------------------------------------------------------
