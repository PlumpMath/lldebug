////////////////////////////////////////////////////////////////////////////
// Name:        wxscintilla.h
// Purpose:     A wxWidgets implementation of Scintilla.  This class is the
//              one meant to be used directly by wx applications.  It does not
//              derive directly from the Scintilla classes, and in fact there
//              is no mention of Scintilla classes at all in this header.
//              This class delegates all method calls and events to the
//              Scintilla objects and so forth.  This allows the use of
//              Scintilla without polluting the namespace with all the
//              classes and itentifiers from Scintilla.
//
// Author:      Robin Dunn
//
// Created:     13-Jan-2000
// RCS-ID:      $Id: wxscintilla.h.in,v 1.1 2008-03-18 16:10:08 cielacanth Exp $
// Copyright:   (c) 2004 wxCode
// Licence:     wxWindows
/////////////////////////////////////////////////////////////////////////////

// modified
// 2007/12/19 07:38:07 cielacanth Exp $

#ifndef __WXSCINTILLA_H__
#define __WXSCINTILLA_H__

#define wxSCINTILLA_VERSION _T("1.69.2")

#include <wx/wx.h>
#include <wx/dnd.h>

#ifdef WXMAKINGDLL_SCI
    #define WXDLLIMPEXP_SCI WXEXPORT
#elif defined(WXUSINGDLL)
    #define WXDLLIMPEXP_SCI WXIMPORT
#else // not making nor using DLL
    #define WXDLLIMPEXP_SCI
#endif


// SWIG can't handle "#if" type of conditionals, only "#ifdef"
#ifdef SWIG
#define SCI_USE_DND 1
#else
#if wxUSE_DRAG_AND_DROP
#define SCI_USE_DND 1
#endif
#endif

//----------------------------------------------------------------------

// Should a wxPopupWindow be used for the call tips and autocomplete windows?
#ifndef wxSCI_USE_POPUP
#define wxSCI_USE_POPUP 1
#endif

// This is a copy of 'scintilla/include/Scintilla.h'.
// Here should be placed typedefs for uptr_t, an unsigned integer type large enough to
// hold a pointer and sptr_t, a signed integer large enough to hold a pointer.
// May need to be changed for 64 bit platforms.
#if _MSC_VER >= 1300
#include <BaseTsd.h>
#endif
#ifdef MAXULONG_PTR
typedef ULONG_PTR wxSCIUPtr;
typedef LONG_PTR wxSCISPtr;
#else
typedef unsigned long wxSCIUPtr;
typedef long wxSCISPtr;
#endif

//----------------------------------------------------------------------
// BEGIN generated section.  The following code is automatically generated
//       by gen_iface.py.  Do not edit this file.  Edit wxscintilla.h.in instead
//       and regenerate

%(VALUES)s


//-----------------------------------------
// Commands that can be bound to keystrokes

%(CMDS)s


// END of generated section
//----------------------------------------------------------------------

class  ScintillaWX;                      // forward declare
class  WordList;
struct SCNotification;

#ifndef SWIG
extern WXDLLIMPEXP_SCI const wxChar* wxSCINameStr;
class  WXDLLIMPEXP_SCI wxScintilla;
class  WXDLLIMPEXP_SCI wxScintillaEvent;
#endif

//----------------------------------------------------------------------

class WXDLLIMPEXP_SCI wxScintilla : public wxControl {
public:

#ifdef SWIGPYTHON
    %%pythonAppend wxScintilla   "self._setOORInfo(self)"
    %%pythonAppend wxScintilla() ""

    wxScintilla (wxWindow *parent, wxWindowID id=wxID_ANY,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize, long style = 0,
                 const wxString& name = wxSCINameStr);
    %%RenameCtor(PreScintilla, wxScintilla());

#elif defined (SWIGRUBY)
    wxScintilla (wxWindow *parent, wxWindowID id=wxID_ANY,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize, long style = 0,
                 const wxString& name = wxSCINameStr);
    ~wxScintilla();
#else
    wxScintilla (wxWindow *parent, wxWindowID id=wxID_ANY,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize, long style = 0,
                 const wxString& name = wxSCINameStr);
    wxScintilla() { m_swx = NULL; }
    ~wxScintilla();

#endif

    bool Create (wxWindow *parent, wxWindowID id=wxID_ANY,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize, long style = 0,
                 const wxString& name = wxSCINameStr);


//----------------------------------------------------------------------
// BEGIN generated section.  The following code is automatically generated
//       by gen_iface.py.  Do not edit this file.  Edit wxscintilla.h.in instead
//       and regenerate

%(METHOD_DEFS)s

// END of generated section
//----------------------------------------------------------------------
// Others...


    // Returns the line number of the line with the caret.
    int GetCurrentLine();

    // Extract style settings from a spec-string which is composed of one or
    // more of the following comma separated elements:
    //
    //      bold                    turns on bold
    //      italic                  turns on italics
    //      fore:[name or #RRGGBB]  sets the foreground colour
    //      back:[name or #RRGGBB]  sets the background colour
    //      face:[facename]         sets the font face name to use
    //      size:[num]              sets the font size in points
    //      eol                     turns on eol filling
    //      underline               turns on underlining
    //
    void StyleSetSpec (int styleNum, const wxString& spec);

    // Set style size, face, bold, italic, and underline attributes from
    // a wxFont's attributes.
    void StyleSetFont (int styleNum, wxFont& font);

    // Set all font style attributes at once.
    void StyleSetFontAttr (int styleNum, int size,const wxString& faceName,
                           bool bold, bool italic, bool underline,
                           wxFontEncoding encoding = wxFONTENCODING_DEFAULT);

    // Set the character set of the font in a style.
    void StyleSetCharacterSet (int style, int characterSet);

    // Set the font encoding to be used by a style.
    void StyleSetFontEncoding (int style, wxFontEncoding encoding);

    // Perform one of the operations defined by the wxSCI_CMD_* constants.
    void CmdKeyExecute (int cmd);

    // Set the left and right margin in the edit area, measured in pixels.
    void SetMargins (int left, int right);

    // Retrieve the start and end positions of the current selection.
#ifdef SWIG
    void GetSelection (int* OUTPUT, int* OUTPUT);
#else
    void GetSelection (int* startPos, int* endPos);
#endif

    // Retrieve the point in the window where a position is displayed.
    wxPoint PointFromPosition (int pos);

    // Scroll enough to make the given line visible
    void ScrollToLine (int line);

    // Scroll enough to make the given column visible
    void ScrollToColumn (int column);

    // Send a message to Scintilla
    wxSCISPtr SendMsg (unsigned int msg, wxSCIUPtr wp=0, wxSCISPtr lp=0);


    // Set the vertical scrollbar to use instead of the ont that's built-in.
    void SetVScrollBar (wxScrollBar* bar);

    // Set the horizontal scrollbar to use instead of the ont that's built-in.
    void SetHScrollBar (wxScrollBar* bar);

    // Can be used to prevent the EVT_CHAR handler from adding the char
    bool GetLastKeydownProcessed() { return m_lastKeyDownConsumed; }
    void SetLastKeydownProcessed (bool val) { m_lastKeyDownConsumed = val; }

    // Write the contents of the editor to filename
    bool SaveFile (const wxString& filename);

    // Load the contents of filename into the editor
    bool LoadFile (const wxString& filename);

#ifdef SCI_USE_DND
    // Allow for simulating a DnD DragOver
    wxDragResult DoDragOver (wxCoord x, wxCoord y, wxDragResult def);

    // Allow for simulating a DnD DropText
    bool DoDropText (long x, long y, const wxString& data);

    // Allow for simulating a DnD DragEnter
    wxDragResult DoDragEnter (wxCoord x, wxCoord y, wxDragResult def);

    // Allow for simulating a DnD DragEnter
    void DoDragLeave ();

#endif

    // Specify whether anti-aliased fonts should be used.  Will have no effect
    // on some platforms, but on some (wxMac for example) can greatly improve
    // performance.
    void SetUseAntiAliasing (bool useAA);

    // Returns the current UseAntiAliasing setting.
    bool GetUseAntiAliasing();

#if wxCHECK_VERSION(2, 5, 0)
    // The following methods are nearly equivallent to their similarly named
    // cousins above.  The difference is that these methods bypass wxString
    // and always use a char* even if used in a unicode build of wxWidgets.
    // In that case the character data will be utf-8 encoded since that is
    // what is used internally by Scintilla in unicode builds.

    // Add text to the document at current position.
    void AddTextRaw (const char* text);

    // Insert string at a position.
    void InsertTextRaw (int pos, const char* text);

    // Retrieve the text of the line containing the caret.
    // Returns the index of the caret on the line.
#ifdef SWIG
    wxCharBuffer GetCurLineRaw (int* OUTPUT);
#else
    wxCharBuffer GetCurLineRaw (int* linePos = NULL);
#endif

    // Retrieve the contents of a line.
    wxCharBuffer GetLineRaw (int line);

    // Retrieve the selected text.
    wxCharBuffer GetSelectedTextRaw();

    // Retrieve a range of text.
    wxCharBuffer GetTextRangeRaw (int startPos, int endPos);

    // Replace the contents of the document with the argument text.
    void SetTextRaw (const char* text);

    // Retrieve all the text in the document.
    wxCharBuffer GetTextRaw();

    // Append a string to the end of the document without changing the selection.
    void AppendTextRaw (const char* text);

#ifdef SWIG
    %%pythoncode "_stc_utf8_methods.py"
#endif
#endif


//----------------------------------------------------------------------

#ifndef SWIG
protected:
    // Event handlers
    void OnPaint (wxPaintEvent& evt);
    void OnScrollWin (wxScrollWinEvent& evt);
    void OnScroll (wxScrollEvent& evt);
    void OnSize (wxSizeEvent& evt);
    void OnMouseLeftDown (wxMouseEvent& evt);
    void OnMouseMove (wxMouseEvent& evt);
    void OnMouseLeftUp (wxMouseEvent& evt);
    void OnMouseRightUp (wxMouseEvent& evt);
    void OnMouseMiddleUp (wxMouseEvent& evt);
    void OnContextMenu (wxContextMenuEvent& evt);
    void OnMouseWheel (wxMouseEvent& evt);
    void OnChar (wxKeyEvent& evt);
    void OnKeyDown (wxKeyEvent& evt);
    void OnLoseFocus (wxFocusEvent& evt);
    void OnGainFocus (wxFocusEvent& evt);
    void OnSysColourChanged (wxSysColourChangedEvent& evt);
    void OnEraseBackground (wxEraseEvent& evt);
    void OnMenu (wxCommandEvent& evt);
    void OnListBox (wxCommandEvent& evt);
    void OnIdle (wxIdleEvent& evt);

    virtual wxSize DoGetBestSize() const;

    // Turn notifications from Scintilla into events
    void NotifyChange();
    void NotifyParent (SCNotification* scn);

protected:
    ScintillaWX* m_swx;
    wxStopWatch m_stopWatch;
    wxScrollBar* m_vScrollBar;
    wxScrollBar* m_hScrollBar;
    bool m_lastKeyDownConsumed;

    friend class ScintillaWX;
    friend class Platform;

private:
    DECLARE_EVENT_TABLE()
    DECLARE_DYNAMIC_CLASS(wxScintilla)
#endif
};

//----------------------------------------------------------------------

class WXDLLIMPEXP_SCI wxScintillaEvent : public wxCommandEvent {
public:
    wxScintillaEvent (wxEventType commandType=0, int id=0);
#ifndef SWIG
    wxScintillaEvent (const wxScintillaEvent& event);
#endif
    ~wxScintillaEvent() {}

    void SetPosition (int pos)             { m_position = pos; }
    void SetKey (int k)                    { m_key = k; }
    void SetModifiers (int m)              { m_modifiers = m; }
    void SetModificationType (int t)       { m_modificationType = t; }
    void SetText (const wxString& t)       { m_text = t; }
    void SetLength (int len)               { m_length = len; }
    void SetLinesAdded (int num)           { m_linesAdded = num; }
    void SetLine (int val)                 { m_line = val; }
    void SetFoldLevelNow (int val)         { m_foldLevelNow = val; }
    void SetFoldLevelPrev (int val)        { m_foldLevelPrev = val; }
    void SetMargin (int val)               { m_margin = val; }
    void SetMessage (int val)              { m_message = val; }
    void SetWParam (int val)               { m_wParam = val; }
    void SetLParam (int val)               { m_lParam = val; }
    void SetListType (int val)             { m_listType = val; }
    void SetX (int val)                    { m_x = val; }
    void SetY (int val)                    { m_y = val; }
    void SetDragText (const wxString& val) { m_dragText = val; }
    void SetDragAllowMove (bool val)       { m_dragAllowMove = val; }
#ifdef  SCI_USE_DND
    void SetDragResult (wxDragResult val)  { m_dragResult = val; }
#endif

    int  GetPosition() const         { return m_position; }
    int  GetKey()  const             { return m_key; }
    int  GetModifiers() const        { return m_modifiers; }
    int  GetModificationType() const { return m_modificationType; }
    wxString GetText() const         { return m_text; }
    int  GetLength() const           { return m_length; }
    int  GetLinesAdded() const       { return m_linesAdded; }
    int  GetLine() const             { return m_line; }
    int  GetFoldLevelNow() const     { return m_foldLevelNow; }
    int  GetFoldLevelPrev() const    { return m_foldLevelPrev; }
    int  GetMargin() const           { return m_margin; }
    int  GetMessage() const          { return m_message; }
    int  GetWParam() const           { return m_wParam; }
    int  GetLParam() const           { return m_lParam; }
    int  GetListType() const         { return m_listType; }
    int  GetX() const                { return m_x; }
    int  GetY() const                { return m_y; }
    wxString GetDragText()           { return m_dragText; }
    bool GetDragAllowMove()          { return m_dragAllowMove; }
#ifdef SCI_USE_DND
    wxDragResult GetDragResult()     { return m_dragResult; }
#endif

    bool GetShift() const;
    bool GetControl() const;
    bool GetAlt() const;

    virtual wxEvent* Clone() const { return new wxScintillaEvent (*this); }

#ifndef SWIG
private:
    DECLARE_DYNAMIC_CLASS(wxScintillaEvent)

    int  m_position;
    int  m_key;
    int  m_modifiers;

    int  m_modificationType;    // wxEVT_SCI_MODIFIED
    wxString m_text;
    int  m_length;
    int  m_linesAdded;
    int  m_line;
    int  m_foldLevelNow;
    int  m_foldLevelPrev;

    int  m_margin;              // wxEVT_SCI_MARGINCLICK

    int  m_message;             // wxEVT_SCI_MACRORECORD
    int  m_wParam;
    int  m_lParam;

    int m_listType;
    int m_x;
    int m_y;

    wxString m_dragText;        // wxEVT_SCI_START_DRAG, wxEVT_SCI_DO_DROP
    bool     m_dragAllowMove;   // wxEVT_SCI_START_DRAG

#if wxUSE_DRAG_AND_DROP
    wxDragResult m_dragResult; // wxEVT_SCI_DRAG_OVER,wxEVT_SCI_DO_DROP
#endif
#endif
};



#ifndef SWIG
BEGIN_DECLARE_EVENT_TYPES()
#if !wxCHECK_VERSION(2, 5, 0)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_CHANGE,                  1650)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_STYLENEEDED,             1651)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_CHARADDED,               1652)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_SAVEPOINTREACHED,        1653)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_SAVEPOINTLEFT,           1654)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_ROMODIFYATTEMPT,         1655)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_KEY,                     1656)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DOUBLECLICK,             1657)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_UPDATEUI,                1658)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_MODIFIED,                1659)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_MACRORECORD,             1660)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_MARGINCLICK,             1661)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_NEEDSHOWN,               1662)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_POSCHANGED,              1663)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_PAINTED,                 1664)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_USERLISTSELECTION,       1665)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_URIDROPPED,              1666)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DWELLSTART,              1667)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DWELLEND,                1668)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_START_DRAG,              1669)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DRAG_OVER,               1670)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DO_DROP,                 1671)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_ZOOM,                    1672)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_HOTSPOT_CLICK,           1673)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_HOTSPOT_DCLICK,          1674)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_CALLTIP_CLICK,           1675)
    DECLARE_EXPORTED_LOCAL_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_AUTOCOMP_SELECTION,      1676)
#else
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_CHANGE,             1650)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_STYLENEEDED,        1651)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_CHARADDED,          1652)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_SAVEPOINTREACHED,   1653)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_SAVEPOINTLEFT,      1654)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_ROMODIFYATTEMPT,    1655)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_KEY,                1656)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DOUBLECLICK,        1657)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_UPDATEUI,           1658)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_MODIFIED,           1659)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_MACRORECORD,        1660)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_MARGINCLICK,        1661)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_NEEDSHOWN,          1662)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_PAINTED,            1664)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_USERLISTSELECTION,  1665)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_URIDROPPED,         1666)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DWELLSTART,         1667)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DWELLEND,           1668)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_START_DRAG,         1669)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DRAG_OVER,          1670)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_DO_DROP,            1671)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_ZOOM,               1672)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_HOTSPOT_CLICK,      1673)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_HOTSPOT_DCLICK,     1674)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_CALLTIP_CLICK,      1675)
    DECLARE_EXPORTED_EVENT_TYPE (WXDLLIMPEXP_SCI, wxEVT_SCI_AUTOCOMP_SELECTION, 1676)
#endif
END_DECLARE_EVENT_TYPES()
#else
    enum {
        wxEVT_SCI_CHANGE,
        wxEVT_SCI_STYLENEEDED,
        wxEVT_SCI_CHARADDED,
        wxEVT_SCI_SAVEPOINTREACHED,
        wxEVT_SCI_SAVEPOINTLEFT,
        wxEVT_SCI_ROMODIFYATTEMPT,
        wxEVT_SCI_KEY,
        wxEVT_SCI_DOUBLECLICK,
        wxEVT_SCI_UPDATEUI,
        wxEVT_SCI_MODIFIED,
        wxEVT_SCI_MACRORECORD,
        wxEVT_SCI_MARGINCLICK,
        wxEVT_SCI_NEEDSHOWN,
        wxEVT_SCI_PAINTED,
        wxEVT_SCI_USERLISTSELECTION,
        wxEVT_SCI_URIDROPPED,
        wxEVT_SCI_DWELLSTART,
        wxEVT_SCI_DWELLEND,
        wxEVT_SCI_START_DRAG,
        wxEVT_SCI_DRAG_OVER,
        wxEVT_SCI_DO_DROP,
        wxEVT_SCI_ZOOM,
        wxEVT_SCI_HOTSPOT_CLICK,
        wxEVT_SCI_HOTSPOT_DCLICK,
        wxEVT_SCI_CALLTIP_CLICK,
        wxEVT_SCI_AUTOCOMP_SELECTION
    };
#endif



#ifndef SWIG
typedef void (wxEvtHandler::*wxScintillaEventFunction)(wxScintillaEvent&);

#if !wxCHECK_VERSION(2, 5, 0)
#define EVT_SCI_CHANGE(id, fn)                  DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_CHANGE,                id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_STYLENEEDED(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_STYLENEEDED,           id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_CHARADDED(id, fn)               DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_CHARADDED,             id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_SAVEPOINTREACHED(id, fn)        DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_SAVEPOINTREACHED,      id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_SAVEPOINTLEFT(id, fn)           DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_SAVEPOINTLEFT,         id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_ROMODIFYATTEMPT(id, fn)         DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_ROMODIFYATTEMPT,       id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_KEY(id, fn)                     DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_KEY,                   id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_DOUBLECLICK(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DOUBLECLICK,           id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_UPDATEUI(id, fn)                DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_UPDATEUI,              id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_MODIFIED(id, fn)                DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_MODIFIED,              id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_MACRORECORD(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_MACRORECORD,           id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_MARGINCLICK(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_MARGINCLICK,           id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_NEEDSHOWN(id, fn)               DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_NEEDSHOWN,             id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_POSCHANGED(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_POSCHANGED,            id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_PAINTED(id, fn)                 DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_PAINTED,               id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_USERLISTSELECTION(id, fn)       DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_USERLISTSELECTION,     id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_URIDROPPED(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_URIDROPPED,            id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_DWELLSTART(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DWELLSTART,            id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_DWELLEND(id, fn)                DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DWELLEND,              id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_START_DRAG(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_START_DRAG,            id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_DRAG_OVER(id, fn)               DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DRAG_OVER,             id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_DO_DROP(id, fn)                 DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DO_DROP,               id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_ZOOM(id, fn)                    DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_ZOOM,                  id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_HOTSPOT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_HOTSPOT_CLICK,         id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_HOTSPOT_DCLICK(id, fn)          DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_HOTSPOT_DCLICK,        id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_CALLTIP_CLICK(id, fn))          DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_CALLTIP_CLICK          id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#define EVT_SCI_AUTOCOMP_SELECTION(id, fn))     DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_AUTOCOMP_SELECTION     id,       -1, (wxObjectEventFunction) (wxEventFunction) (wxScintillaEventFunction) & fn, (wxObject *) NULL),
#else
#define EVT_SCI_CHANGE(id, fn)                  DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_CHANGE,                id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_STYLENEEDED(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_STYLENEEDED,           id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_CHARADDED(id, fn)               DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_CHARADDED,             id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_SAVEPOINTREACHED(id, fn)        DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_SAVEPOINTREACHED,      id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_SAVEPOINTLEFT(id, fn)           DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_SAVEPOINTLEFT,         id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_ROMODIFYATTEMPT(id, fn)         DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_ROMODIFYATTEMPT,       id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_KEY(id, fn)                     DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_KEY,                   id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_DOUBLECLICK(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DOUBLECLICK,           id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_UPDATEUI(id, fn)                DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_UPDATEUI,              id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_MODIFIED(id, fn)                DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_MODIFIED,              id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_MACRORECORD(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_MACRORECORD,           id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_MARGINCLICK(id, fn)             DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_MARGINCLICK,           id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_NEEDSHOWN(id, fn)               DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_NEEDSHOWN,             id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_PAINTED(id, fn)                 DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_PAINTED,               id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_USERLISTSELECTION(id, fn)       DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_USERLISTSELECTION,     id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_URIDROPPED(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_URIDROPPED,            id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_DWELLSTART(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DWELLSTART,            id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_DWELLEND(id, fn)                DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DWELLEND,              id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_START_DRAG(id, fn)              DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_START_DRAG,            id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_DRAG_OVER(id, fn)               DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DRAG_OVER,             id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_DO_DROP(id, fn)                 DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_DO_DROP,               id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_ZOOM(id, fn)                    DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_ZOOM,                  id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_HOTSPOT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_HOTSPOT_CLICK,         id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_HOTSPOT_DCLICK(id, fn)          DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_HOTSPOT_DCLICK,        id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_CALLTIP_CLICK(id, fn))          DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_CALLTIP_CLICK          id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#define EVT_SCI_AUTOCOMP_SELECTION(id, fn))     DECLARE_EVENT_TABLE_ENTRY (wxEVT_SCI_AUTOCOMP_SELECTION     id, wxID_ANY, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxScintillaEventFunction, & fn ), (wxObject *) NULL),
#endif

#endif

//----------------------------------------------------------------------
// Utility functions used within wxScintilla

#ifndef SWIG

inline wxString sci2wx (const char* str) {
#if wxUSE_UNICODE
    return wxString (str, wxConvUTF8);
#else
    return wxString (str);
#endif
}

#if wxUSE_UNICODE
wxString sci2wx (const char* str, size_t len);
#else
inline wxString sci2wx (const char* str, size_t len) {
    return wxString (str, len);
}
#endif


#if wxUSE_UNICODE
inline const wxWX2MBbuf wx2sci (const wxString& str) {
    return str.mb_str (wxConvUTF8);
}
#else
inline const wxWX2MBbuf wx2sci (const wxString& str) {
    return str.mbc_str();
}
#endif

#endif


//----------------------------------------------------------------------
#endif // __WXSCINTILLA_H__
